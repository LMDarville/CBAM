#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CBAM.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CBAM")]
	public partial class CBAMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUtility(Utility instance);
    partial void UpdateUtility(Utility instance);
    partial void DeleteUtility(Utility instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertQualityAttributeResponseType(QualityAttributeResponseType instance);
    partial void UpdateQualityAttributeResponseType(QualityAttributeResponseType instance);
    partial void DeleteQualityAttributeResponseType(QualityAttributeResponseType instance);
    partial void InsertImportance(Importance instance);
    partial void UpdateImportance(Importance instance);
    partial void DeleteImportance(Importance instance);
    partial void InsertScenario(Scenario instance);
    partial void UpdateScenario(Scenario instance);
    partial void DeleteScenario(Scenario instance);
    partial void InsertStep(Step instance);
    partial void UpdateStep(Step instance);
    partial void DeleteStep(Step instance);
    partial void InsertExpectedUtility(ExpectedUtility instance);
    partial void UpdateExpectedUtility(ExpectedUtility instance);
    partial void DeleteExpectedUtility(ExpectedUtility instance);
    partial void InsertArchitecturalStrategy(ArchitecturalStrategy instance);
    partial void UpdateArchitecturalStrategy(ArchitecturalStrategy instance);
    partial void DeleteArchitecturalStrategy(ArchitecturalStrategy instance);
    #endregion
		
		public CBAMDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CBAMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CBAMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CBAMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CBAMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CBAMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Utility> Utilities
		{
			get
			{
				return this.GetTable<Utility>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<QualityAttributeResponseType> QualityAttributeResponseTypes
		{
			get
			{
				return this.GetTable<QualityAttributeResponseType>();
			}
		}
		
		public System.Data.Linq.Table<Importance> Importances
		{
			get
			{
				return this.GetTable<Importance>();
			}
		}
		
		public System.Data.Linq.Table<Scenario> Scenarios
		{
			get
			{
				return this.GetTable<Scenario>();
			}
		}
		
		public System.Data.Linq.Table<Step> Steps
		{
			get
			{
				return this.GetTable<Step>();
			}
		}
		
		public System.Data.Linq.Table<ExpectedUtility> ExpectedUtilities
		{
			get
			{
				return this.GetTable<ExpectedUtility>();
			}
		}
		
		public System.Data.Linq.Table<ArchitecturalStrategy> ArchitecturalStrategies
		{
			get
			{
				return this.GetTable<ArchitecturalStrategy>();
			}
		}
		
		public System.Data.Linq.Table<Benefit> Benefits
		{
			get
			{
				return this.GetTable<Benefit>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spGetBenefit")]
		public ISingleResult<Benefit> spGetBenefit([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> projID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projID);
			return ((ISingleResult<Benefit>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utility")]
	public partial class Utility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ScenarioID;
		
		private string _QualityAttributeResponseTypeID;
		
		private System.Nullable<int> _Utility1;
		
		private string _Description;
		
		private EntityRef<QualityAttributeResponseType> _QualityAttributeResponseType;
		
		private EntityRef<Scenario> _Scenario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnScenarioIDChanging(long value);
    partial void OnScenarioIDChanged();
    partial void OnQualityAttributeResponseTypeIDChanging(string value);
    partial void OnQualityAttributeResponseTypeIDChanged();
    partial void OnUtility1Changing(System.Nullable<int> value);
    partial void OnUtility1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Utility()
		{
			this._QualityAttributeResponseType = default(EntityRef<QualityAttributeResponseType>);
			this._Scenario = default(EntityRef<Scenario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioID", DbType="BigInt NOT NULL")]
		public long ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					if (this._Scenario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityAttributeResponseTypeID", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string QualityAttributeResponseTypeID
		{
			get
			{
				return this._QualityAttributeResponseTypeID;
			}
			set
			{
				if ((this._QualityAttributeResponseTypeID != value))
				{
					if (this._QualityAttributeResponseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityAttributeResponseTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QualityAttributeResponseTypeID = value;
					this.SendPropertyChanged("QualityAttributeResponseTypeID");
					this.OnQualityAttributeResponseTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Utility", Storage="_Utility1", DbType="Int")]
		public System.Nullable<int> Utility1
		{
			get
			{
				return this._Utility1;
			}
			set
			{
				if ((this._Utility1 != value))
				{
					this.OnUtility1Changing(value);
					this.SendPropertyChanging();
					this._Utility1 = value;
					this.SendPropertyChanged("Utility1");
					this.OnUtility1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityAttributeResponseType_Utility", Storage="_QualityAttributeResponseType", ThisKey="QualityAttributeResponseTypeID", OtherKey="ID", IsForeignKey=true)]
		public QualityAttributeResponseType QualityAttributeResponseType
		{
			get
			{
				return this._QualityAttributeResponseType.Entity;
			}
			set
			{
				QualityAttributeResponseType previousValue = this._QualityAttributeResponseType.Entity;
				if (((previousValue != value) 
							|| (this._QualityAttributeResponseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityAttributeResponseType.Entity = null;
						previousValue.Utilities.Remove(this);
					}
					this._QualityAttributeResponseType.Entity = value;
					if ((value != null))
					{
						value.Utilities.Add(this);
						this._QualityAttributeResponseTypeID = value.ID;
					}
					else
					{
						this._QualityAttributeResponseTypeID = default(string);
					}
					this.SendPropertyChanged("QualityAttributeResponseType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_Utility", Storage="_Scenario", ThisKey="ScenarioID", OtherKey="ID", IsForeignKey=true)]
		public Scenario Scenario
		{
			get
			{
				return this._Scenario.Entity;
			}
			set
			{
				Scenario previousValue = this._Scenario.Entity;
				if (((previousValue != value) 
							|| (this._Scenario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scenario.Entity = null;
						previousValue.Utilities.Remove(this);
					}
					this._Scenario.Entity = value;
					if ((value != null))
					{
						value.Utilities.Add(this);
						this._ScenarioID = value.ID;
					}
					else
					{
						this._ScenarioID = default(long);
					}
					this.SendPropertyChanged("Scenario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsActive;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _LastModified;
		
		private EntitySet<Scenario> _Scenarios;
		
		private EntitySet<ArchitecturalStrategy> _ArchitecturalStrategies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public Project()
		{
			this._Scenarios = new EntitySet<Scenario>(new Action<Scenario>(this.attach_Scenarios), new Action<Scenario>(this.detach_Scenarios));
			this._ArchitecturalStrategies = new EntitySet<ArchitecturalStrategy>(new Action<ArchitecturalStrategy>(this.attach_ArchitecturalStrategies), new Action<ArchitecturalStrategy>(this.detach_ArchitecturalStrategies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Scenario", Storage="_Scenarios", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Scenario> Scenarios
		{
			get
			{
				return this._Scenarios;
			}
			set
			{
				this._Scenarios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ArchitecturalStrategy", Storage="_ArchitecturalStrategies", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ArchitecturalStrategy> ArchitecturalStrategies
		{
			get
			{
				return this._ArchitecturalStrategies;
			}
			set
			{
				this._ArchitecturalStrategies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scenarios(Scenario entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Scenarios(Scenario entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ArchitecturalStrategies(ArchitecturalStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ArchitecturalStrategies(ArchitecturalStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualityAttributeResponseType")]
	public partial class QualityAttributeResponseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Type;
		
		private int _Order;
		
		private EntitySet<Utility> _Utilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public QualityAttributeResponseType()
		{
			this._Utilities = new EntitySet<Utility>(new Action<Utility>(this.attach_Utilities), new Action<Utility>(this.detach_Utilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityAttributeResponseType_Utility", Storage="_Utilities", ThisKey="ID", OtherKey="QualityAttributeResponseTypeID")]
		public EntitySet<Utility> Utilities
		{
			get
			{
				return this._Utilities;
			}
			set
			{
				this._Utilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Utilities(Utility entity)
		{
			this.SendPropertyChanging();
			entity.QualityAttributeResponseType = this;
		}
		
		private void detach_Utilities(Utility entity)
		{
			this.SendPropertyChanging();
			entity.QualityAttributeResponseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RatingDescription")]
	public partial class Importance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRatingDescription;
		
		private string _Description;
		
		private EntitySet<Scenario> _Scenarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRatingDescriptionChanging(int value);
    partial void OnIDRatingDescriptionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Importance()
		{
			this._Scenarios = new EntitySet<Scenario>(new Action<Scenario>(this.attach_Scenarios), new Action<Scenario>(this.detach_Scenarios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRatingDescription", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRatingDescription
		{
			get
			{
				return this._IDRatingDescription;
			}
			set
			{
				if ((this._IDRatingDescription != value))
				{
					this.OnIDRatingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._IDRatingDescription = value;
					this.SendPropertyChanged("IDRatingDescription");
					this.OnIDRatingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Importance_Scenario", Storage="_Scenarios", ThisKey="IDRatingDescription", OtherKey="ImportanceRatingID")]
		public EntitySet<Scenario> Scenarios
		{
			get
			{
				return this._Scenarios;
			}
			set
			{
				this._Scenarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scenarios(Scenario entity)
		{
			this.SendPropertyChanging();
			entity.Importance = this;
		}
		
		private void detach_Scenarios(Scenario entity)
		{
			this.SendPropertyChanging();
			entity.Importance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scenarios")]
	public partial class Scenario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Source;
		
		private string _Description;
		
		private string _Stimulas;
		
		private string _Artifact;
		
		private string _Environment;
		
		private string _Response;
		
		private string _ResponseMeasure;
		
		private System.Nullable<int> _ImportanceRatingID;
		
		private System.Nullable<int> _DifficultyRatingID;
		
		private System.Nullable<int> _Votes;
		
		private System.Nullable<int> _Priority;
		
		private bool _IsActive;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _LastModified;
		
		private long _ProjectID;
		
		private EntitySet<Utility> _Utilities;
		
		private EntitySet<ExpectedUtility> _ExpectedUtilities;
		
		private EntityRef<Importance> _RatingDescription;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStimulasChanging(string value);
    partial void OnStimulasChanged();
    partial void OnArtifactChanging(string value);
    partial void OnArtifactChanged();
    partial void OnEnvironmentChanging(string value);
    partial void OnEnvironmentChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnResponseMeasureChanging(string value);
    partial void OnResponseMeasureChanged();
    partial void OnImportanceRatingIDChanging(System.Nullable<int> value);
    partial void OnImportanceRatingIDChanged();
    partial void OnDifficultyRatingIDChanging(System.Nullable<int> value);
    partial void OnDifficultyRatingIDChanged();
    partial void OnVotesChanging(System.Nullable<int> value);
    partial void OnVotesChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnProjectIDChanging(long value);
    partial void OnProjectIDChanged();
    #endregion
		
		public Scenario()
		{
			this._Utilities = new EntitySet<Utility>(new Action<Utility>(this.attach_Utilities), new Action<Utility>(this.detach_Utilities));
			this._ExpectedUtilities = new EntitySet<ExpectedUtility>(new Action<ExpectedUtility>(this.attach_ExpectedUtilities), new Action<ExpectedUtility>(this.detach_ExpectedUtilities));
			this._RatingDescription = default(EntityRef<Importance>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stimulas", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Stimulas
		{
			get
			{
				return this._Stimulas;
			}
			set
			{
				if ((this._Stimulas != value))
				{
					this.OnStimulasChanging(value);
					this.SendPropertyChanging();
					this._Stimulas = value;
					this.SendPropertyChanged("Stimulas");
					this.OnStimulasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artifact", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Artifact
		{
			get
			{
				return this._Artifact;
			}
			set
			{
				if ((this._Artifact != value))
				{
					this.OnArtifactChanging(value);
					this.SendPropertyChanging();
					this._Artifact = value;
					this.SendPropertyChanged("Artifact");
					this.OnArtifactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Environment", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Environment
		{
			get
			{
				return this._Environment;
			}
			set
			{
				if ((this._Environment != value))
				{
					this.OnEnvironmentChanging(value);
					this.SendPropertyChanging();
					this._Environment = value;
					this.SendPropertyChanged("Environment");
					this.OnEnvironmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseMeasure", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string ResponseMeasure
		{
			get
			{
				return this._ResponseMeasure;
			}
			set
			{
				if ((this._ResponseMeasure != value))
				{
					this.OnResponseMeasureChanging(value);
					this.SendPropertyChanging();
					this._ResponseMeasure = value;
					this.SendPropertyChanged("ResponseMeasure");
					this.OnResponseMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportanceRatingID", DbType="Int")]
		public System.Nullable<int> ImportanceRatingID
		{
			get
			{
				return this._ImportanceRatingID;
			}
			set
			{
				if ((this._ImportanceRatingID != value))
				{
					if (this._RatingDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImportanceRatingIDChanging(value);
					this.SendPropertyChanging();
					this._ImportanceRatingID = value;
					this.SendPropertyChanged("ImportanceRatingID");
					this.OnImportanceRatingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultyRatingID", DbType="Int")]
		public System.Nullable<int> DifficultyRatingID
		{
			get
			{
				return this._DifficultyRatingID;
			}
			set
			{
				if ((this._DifficultyRatingID != value))
				{
					this.OnDifficultyRatingIDChanging(value);
					this.SendPropertyChanging();
					this._DifficultyRatingID = value;
					this.SendPropertyChanged("DifficultyRatingID");
					this.OnDifficultyRatingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Votes", DbType="Int")]
		public System.Nullable<int> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				if ((this._Votes != value))
				{
					this.OnVotesChanging(value);
					this.SendPropertyChanging();
					this._Votes = value;
					this.SendPropertyChanged("Votes");
					this.OnVotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="BigInt")]
		public long ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_Utility", Storage="_Utilities", ThisKey="ID", OtherKey="ScenarioID")]
		public EntitySet<Utility> Utilities
		{
			get
			{
				return this._Utilities;
			}
			set
			{
				this._Utilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_ExpectedUtility", Storage="_ExpectedUtilities", ThisKey="ID", OtherKey="ScenarioID")]
		public EntitySet<ExpectedUtility> ExpectedUtilities
		{
			get
			{
				return this._ExpectedUtilities;
			}
			set
			{
				this._ExpectedUtilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Importance_Scenario", Storage="_RatingDescription", ThisKey="ImportanceRatingID", OtherKey="IDRatingDescription", IsForeignKey=true)]
		public Importance Importance
		{
			get
			{
				return this._RatingDescription.Entity;
			}
			set
			{
				Importance previousValue = this._RatingDescription.Entity;
				if (((previousValue != value) 
							|| (this._RatingDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RatingDescription.Entity = null;
						previousValue.Scenarios.Remove(this);
					}
					this._RatingDescription.Entity = value;
					if ((value != null))
					{
						value.Scenarios.Add(this);
						this._ImportanceRatingID = value.IDRatingDescription;
					}
					else
					{
						this._ImportanceRatingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Importance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Scenario", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Scenarios.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Scenarios.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Utilities(Utility entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = this;
		}
		
		private void detach_Utilities(Utility entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = null;
		}
		
		private void attach_ExpectedUtilities(ExpectedUtility entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = this;
		}
		
		private void detach_ExpectedUtilities(ExpectedUtility entity)
		{
			this.SendPropertyChanging();
			entity.Scenario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Steps")]
	public partial class Step : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Step1;
		
		private string _Description;
		
		private bool _Complete;
		
		private string _TabRef;
		
		private string _Instructions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStep1Changing(int value);
    partial void OnStep1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompleteChanging(bool value);
    partial void OnCompleteChanged();
    partial void OnTabRefChanging(string value);
    partial void OnTabRefChanged();
    partial void OnInstructionsChanging(string value);
    partial void OnInstructionsChanged();
    #endregion
		
		public Step()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Step", Storage="_Step1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Step1
		{
			get
			{
				return this._Step1;
			}
			set
			{
				if ((this._Step1 != value))
				{
					this.OnStep1Changing(value);
					this.SendPropertyChanging();
					this._Step1 = value;
					this.SendPropertyChanged("Step1");
					this.OnStep1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="Bit NOT NULL")]
		public bool Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabRef", DbType="NChar(10)")]
		public string TabRef
		{
			get
			{
				return this._TabRef;
			}
			set
			{
				if ((this._TabRef != value))
				{
					this.OnTabRefChanging(value);
					this.SendPropertyChanging();
					this._TabRef = value;
					this.SendPropertyChanged("TabRef");
					this.OnTabRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructions", DbType="NChar(1000)")]
		public string Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				if ((this._Instructions != value))
				{
					this.OnInstructionsChanging(value);
					this.SendPropertyChanging();
					this._Instructions = value;
					this.SendPropertyChanged("Instructions");
					this.OnInstructionsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpectedUtilities")]
	public partial class ExpectedUtility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ArchitecturalStrategyID;
		
		private System.Nullable<long> _ScenarioID;
		
		private string _ExpectedUtilityDescription;
		
		private System.Nullable<int> _ExpectedUtility1;
		
		private EntityRef<Scenario> _Scenario;
		
		private EntityRef<ArchitecturalStrategy> _ArchitecturalStrategy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnArchitecturalStrategyIDChanging(long value);
    partial void OnArchitecturalStrategyIDChanged();
    partial void OnScenarioIDChanging(System.Nullable<long> value);
    partial void OnScenarioIDChanged();
    partial void OnExpectedUtilityDescriptionChanging(string value);
    partial void OnExpectedUtilityDescriptionChanged();
    partial void OnExpectedUtility1Changing(System.Nullable<int> value);
    partial void OnExpectedUtility1Changed();
    #endregion
		
		public ExpectedUtility()
		{
			this._Scenario = default(EntityRef<Scenario>);
			this._ArchitecturalStrategy = default(EntityRef<ArchitecturalStrategy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArchitecturalStrategyID", DbType="BigInt NOT NULL")]
		public long ArchitecturalStrategyID
		{
			get
			{
				return this._ArchitecturalStrategyID;
			}
			set
			{
				if ((this._ArchitecturalStrategyID != value))
				{
					if (this._ArchitecturalStrategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchitecturalStrategyIDChanging(value);
					this.SendPropertyChanging();
					this._ArchitecturalStrategyID = value;
					this.SendPropertyChanged("ArchitecturalStrategyID");
					this.OnArchitecturalStrategyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioID", DbType="BigInt")]
		public System.Nullable<long> ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					if (this._Scenario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScenarioIDChanging(value);
					this.SendPropertyChanging();
					this._ScenarioID = value;
					this.SendPropertyChanged("ScenarioID");
					this.OnScenarioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedUtilityDescription", DbType="NChar(250)")]
		public string ExpectedUtilityDescription
		{
			get
			{
				return this._ExpectedUtilityDescription;
			}
			set
			{
				if ((this._ExpectedUtilityDescription != value))
				{
					this.OnExpectedUtilityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ExpectedUtilityDescription = value;
					this.SendPropertyChanged("ExpectedUtilityDescription");
					this.OnExpectedUtilityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ExpectedUtility", Storage="_ExpectedUtility1", DbType="Int")]
		public System.Nullable<int> ExpectedUtility1
		{
			get
			{
				return this._ExpectedUtility1;
			}
			set
			{
				if ((this._ExpectedUtility1 != value))
				{
					this.OnExpectedUtility1Changing(value);
					this.SendPropertyChanging();
					this._ExpectedUtility1 = value;
					this.SendPropertyChanged("ExpectedUtility1");
					this.OnExpectedUtility1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scenario_ExpectedUtility", Storage="_Scenario", ThisKey="ScenarioID", OtherKey="ID", IsForeignKey=true)]
		public Scenario Scenario
		{
			get
			{
				return this._Scenario.Entity;
			}
			set
			{
				Scenario previousValue = this._Scenario.Entity;
				if (((previousValue != value) 
							|| (this._Scenario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scenario.Entity = null;
						previousValue.ExpectedUtilities.Remove(this);
					}
					this._Scenario.Entity = value;
					if ((value != null))
					{
						value.ExpectedUtilities.Add(this);
						this._ScenarioID = value.ID;
					}
					else
					{
						this._ScenarioID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Scenario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchitecturalStrategy_ExpectedUtility", Storage="_ArchitecturalStrategy", ThisKey="ArchitecturalStrategyID", OtherKey="ID", IsForeignKey=true)]
		public ArchitecturalStrategy ArchitecturalStrategy
		{
			get
			{
				return this._ArchitecturalStrategy.Entity;
			}
			set
			{
				ArchitecturalStrategy previousValue = this._ArchitecturalStrategy.Entity;
				if (((previousValue != value) 
							|| (this._ArchitecturalStrategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArchitecturalStrategy.Entity = null;
						previousValue.ExpectedUtilities.Remove(this);
					}
					this._ArchitecturalStrategy.Entity = value;
					if ((value != null))
					{
						value.ExpectedUtilities.Add(this);
						this._ArchitecturalStrategyID = value.ID;
					}
					else
					{
						this._ArchitecturalStrategyID = default(long);
					}
					this.SendPropertyChanged("ArchitecturalStrategy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArchitecturalStrategies")]
	public partial class ArchitecturalStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsActive;
		
		private System.DateTime _DateAdded;
		
		private System.DateTime _LastModified;
		
		private bool _IsComplete;
		
		private long _ProjectID;
		
		private System.Nullable<long> _Cost;
		
		private EntitySet<ExpectedUtility> _ExpectedUtilities;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnProjectIDChanging(long value);
    partial void OnProjectIDChanged();
    partial void OnCostChanging(System.Nullable<long> value);
    partial void OnCostChanged();
    #endregion
		
		public ArchitecturalStrategy()
		{
			this._ExpectedUtilities = new EntitySet<ExpectedUtility>(new Action<ExpectedUtility>(this.attach_ExpectedUtilities), new Action<ExpectedUtility>(this.detach_ExpectedUtilities));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CompletelyDefined", Storage="_IsComplete", DbType="Bit")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="BigInt NOT NULL")]
		public long ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="bigint")]
		public System.Nullable<long> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArchitecturalStrategy_ExpectedUtility", Storage="_ExpectedUtilities", ThisKey="ID", OtherKey="ArchitecturalStrategyID")]
		public EntitySet<ExpectedUtility> ExpectedUtilities
		{
			get
			{
				return this._ExpectedUtilities;
			}
			set
			{
				this._ExpectedUtilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ArchitecturalStrategy", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ArchitecturalStrategies.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ArchitecturalStrategies.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpectedUtilities(ExpectedUtility entity)
		{
			this.SendPropertyChanging();
			entity.ArchitecturalStrategy = this;
		}
		
		private void detach_ExpectedUtilities(ExpectedUtility entity)
		{
			this.SendPropertyChanging();
			entity.ArchitecturalStrategy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Benefit")]
	public partial class Benefit
	{
		
		private long _StrategyID;
		
		private long _ScenarioID;
		
		private long _ProjectID;
		
		private System.Nullable<int> _ExpectedUtility;
		
		private string _ProjectName;
		
		private string _StrategyName;
		
		private string _StrategyDescription;
		
		private System.Nullable<long> _StrategyCost;
		
		private System.Nullable<int> _CurrentUtility;
		
		private System.Nullable<int> _wt;
		
		private System.Nullable<int> _RawBenefit;
		
		private System.Nullable<int> _Benefit1;
		
		private System.Nullable<decimal> _ROI;
		
		public Benefit()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyID", DbType="BigInt NOT NULL")]
		public long StrategyID
		{
			get
			{
				return this._StrategyID;
			}
			set
			{
				if ((this._StrategyID != value))
				{
					this._StrategyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioID", DbType="BigInt NOT NULL")]
		public long ScenarioID
		{
			get
			{
				return this._ScenarioID;
			}
			set
			{
				if ((this._ScenarioID != value))
				{
					this._ScenarioID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="BigInt NOT NULL")]
		public long ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedUtility", DbType="Int")]
		public System.Nullable<int> ExpectedUtility
		{
			get
			{
				return this._ExpectedUtility;
			}
			set
			{
				if ((this._ExpectedUtility != value))
				{
					this._ExpectedUtility = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NChar(50)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string StrategyName
		{
			get
			{
				return this._StrategyName;
			}
			set
			{
				if ((this._StrategyName != value))
				{
					this._StrategyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyDescription", DbType="NChar(250) NOT NULL", CanBeNull=false)]
		public string StrategyDescription
		{
			get
			{
				return this._StrategyDescription;
			}
			set
			{
				if ((this._StrategyDescription != value))
				{
					this._StrategyDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyCost", DbType="BigInt")]
		public System.Nullable<long> StrategyCost
		{
			get
			{
				return this._StrategyCost;
			}
			set
			{
				if ((this._StrategyCost != value))
				{
					this._StrategyCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentUtility", DbType="Int")]
		public System.Nullable<int> CurrentUtility
		{
			get
			{
				return this._CurrentUtility;
			}
			set
			{
				if ((this._CurrentUtility != value))
				{
					this._CurrentUtility = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wt", DbType="Int")]
		public System.Nullable<int> wt
		{
			get
			{
				return this._wt;
			}
			set
			{
				if ((this._wt != value))
				{
					this._wt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawBenefit", DbType="Int")]
		public System.Nullable<int> RawBenefit
		{
			get
			{
				return this._RawBenefit;
			}
			set
			{
				if ((this._RawBenefit != value))
				{
					this._RawBenefit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Benefit", Storage="_Benefit1", DbType="Int")]
		public System.Nullable<int> Benefit1
		{
			get
			{
				return this._Benefit1;
			}
			set
			{
				if ((this._Benefit1 != value))
				{
					this._Benefit1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROI", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ROI
		{
			get
			{
				return this._ROI;
			}
			set
			{
				if ((this._ROI != value))
				{
					this._ROI = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
